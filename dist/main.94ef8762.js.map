{"version":3,"sources":["../src/constants.ts","../src/Deck.ts","../src/rankHelper.ts","../src/PokerGame.ts","../src/main.ts"],"names":[],"mappings":"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","file":"main.94ef8762.js","sourceRoot":"..","sourcesContent":["// This file will hold all the constant values\n\nconst SPADES = 4;\nconst CLUBS = 3;\nconst HEARTS = 2;\nconst DIAMONDS = 1;\n\nconst ACE = 13;\nconst KING = 12;\nconst QUEEN = 11;\nconst JACK = 10;\nconst VALUE_10 = 9;\nconst VALUE_9 = 8;\nconst VALUE_8 = 7;\nconst VALUE_7 = 6;\nconst VALUE_6 = 5;\nconst VALUE_5 = 4;\nconst VALUE_4 = 3;\nconst VALUE_3 = 2;\nconst VALUE_2 = 1;\n\nexport const CARD_SUITS = [SPADES, CLUBS, HEARTS, DIAMONDS];\nexport const CARD_VALUES = [ACE, KING, QUEEN, JACK, VALUE_10, VALUE_9, VALUE_8, VALUE_7, VALUE_6, VALUE_5, VALUE_4, VALUE_3, VALUE_2]\n\nexport const SHUFFLE_TIMES = 3;\nexport const CARDS_PER_PLAYER = 2;\n\nexport enum DeckStatus {\n    NEW = 0,\n    SHUFFLED = 1,\n    INCOMPLETE = 2\n}\n\nexport enum GameStatus {\n    NEW = 0,\n    ONGOING = 1,\n    FINISHED = 2\n}\n\nexport enum RoundStatus {\n    READY = 0,\n    STARTED = 1,\n    RANKED = 2\n}\n\nexport enum PokerRanks {\n    HIGH_CARD = 1,\n    PAIR = 2,\n    STRAIGHT = 3,\n    FLUSH = 4,\n    STRAIGHT_FLUSH = 5\n}","import { CARD_SUITS, CARD_VALUES, DeckStatus} from \"./constants\";\nimport { Card } from \"./interfaces\";\n\nclass Deck {\n    // This is to simulate the singleton pattern and make sure we are always using the \"same\" deck\n    // This is an essential requirement, specially when talking about multiple players with unique cards\n    private static instance: Deck;\n    static getInstance() {\n        if (!Deck.instance) {\n            Deck.instance = new Deck();\n        }\n        return Deck.instance;\n    }\n\n    private cards: Card[];\n    private deckStatus: DeckStatus;\n\n    private constructor() {\n        this.cards = this.generateNewDeck();\n        this.deckStatus = DeckStatus.NEW;\n    }\n\n    // Creates a new deck in sequence, just like a brand new deck of cards from the store\n    private generateNewDeck(): Card[] {\n        const cards: Card[] = [];\n        for (let value of CARD_VALUES) {\n            for (let suit of CARD_SUITS) {\n                cards.push({\n                    \"value\": value,\n                    \"suit\": suit\n                });\n            }\n        }\n        return cards;\n    }\n\n    getCards(): Card[]{\n        return this.cards;\n    }\n\n    resetDeck(): void{\n        this.cards = this.generateNewDeck();\n        this.deckStatus = DeckStatus.NEW;\n    }\n\n    shuffleDeck(times: number): void{\n        if (this.deckStatus === DeckStatus.INCOMPLETE){\n            throw new Error(\"Deck is incomplete. Please restart the deck\");\n        }\n\n        // Shuffle the deck X times\n        for(let i = 0; i < times; i++) {\n            const shuffledDeck: Card[] = [];\n\n            while (this.cards.length > 0) {\n                const randomNumber = Math.floor(Math.random() * Math.floor(this.cards.length));\n                shuffledDeck.push(this.cards[randomNumber]);\n                this.cards.splice(randomNumber, 1);\n            };\n\n            this.cards = shuffledDeck;\n        }\n\n        this.deckStatus = DeckStatus.SHUFFLED;\n    }\n\n    dealCards(numberOfPlayers: number, cardsPerPlayer: number = 2): Card[][]{\n        if ((numberOfPlayers * cardsPerPlayer) > this.cards.length){\n            throw new Error(\"Too many players for the current amount of cards.\");\n        }\n\n        if (this.deckStatus !== DeckStatus.SHUFFLED){\n            throw new Error(\"Deck not shuffled. Please shuffle the deck before dealing cards.\");\n        }\n\n        // Deal X cards to each of X players (Default: 2 cards per player)\n        const dealtCards:Card[][] = [];\n        for (let i = 0; i < numberOfPlayers; i++){\n            const playerCards:Card[] = [];\n            for (let j = 0; j < cardsPerPlayer; j++){\n                const drawCard = this.cards.shift()\n\n                if (!drawCard){\n                    throw new Error(\"Deck ran out of cards. Please reset the deck.\");\n                }\n                playerCards.push(drawCard);\n            }\n            dealtCards.push(playerCards);\n        }\n\n        return dealtCards;\n    }\n}\n\nexport default Deck.getInstance();\n","import { Card, Player } from \"./interfaces\";\n\nexport const isStraightFlush = (cards: Card[]): boolean => {\n    if (cards[0].suit === cards[1].suit) {\n        // Check the absolute value, meaning values are in sequence\n        if (Math.abs(cards[0].value - cards[1].value) === 1){\n            return true;\n        }\n    }\n    return false;\n}\n\nexport const isFlush = (cards: Card[]): boolean => {\n    if (cards[0].suit === cards[1].suit) {\n            return true;\n    }\n    return false;\n}\n\nexport const isStraight = (cards: Card[]): boolean => {\n    if (cards[0].suit !== cards[1].suit) {\n        // Check the absolute value, meaning values are in sequence\n        if (Math.abs(cards[0].value - cards[1].value) === 1){\n            return true;\n        }\n    }\n    return false;\n}\n\nexport const isPair = (cards: Card[]): boolean => {\n    if (cards[0].value === cards[1].value) {\n            return true;\n    }\n    return false;\n}\n\nexport const isHighCard = (cards: Card[]): boolean => {\n    if (cards[0].value !== cards[1].value) {\n        if (cards[0].suit !== cards[1].suit) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconst getHighestCard = (cards: Card[]) => {\n    if (cards[0].value > cards[1].value){\n        return cards[0];\n    }\n    return cards[1];\n}\n\nconst compareSameRankPlayers = (card1: Card[], card2: Card[]): number =>{\n    const highestCardPlayer1 = getHighestCard(card1);\n    const highestCardPlayer2 = getHighestCard(card2);\n    \n    if (highestCardPlayer1.value < highestCardPlayer2.value){\n        return 1;\n    } else if (highestCardPlayer1.value > highestCardPlayer2.value){\n        return -1;\n    } else {\n        if (highestCardPlayer1.suit < highestCardPlayer2.suit){\n            return 1;\n        } else if (highestCardPlayer1.suit > highestCardPlayer2.suit){\n            return -1;\n        }\n    }\n    throw new Error(\"Could not compare cards. Please restart the game.\");\n}\n\nexport const comparePlayerCards = (player1: Player, player2: Player): number => {\n    if (player1.rank < player2.rank){\n        return 1;\n    } else if (player1.rank > player2.rank){\n        return -1;\n    } else {\n        return compareSameRankPlayers(player1.cards, player2.cards);\n    }\n}","import Deck from \"./Deck\";\nimport { GameStatus, RoundStatus, SHUFFLE_TIMES, CARDS_PER_PLAYER, PokerRanks } from \"./constants\";\nimport { Card, Player } from \"./interfaces\";\nimport { isStraightFlush, isFlush, isStraight, isPair, isHighCard, comparePlayerCards } from \"./rankHelper\";\n\nclass PokerGame {\n    private gameStatus: GameStatus;\n    private players: Player[];\n    private totalRounds: number;\n    private currentRound: number;\n    private roundStatus: RoundStatus;\n\n    constructor(numberOfPlayers: number, numberOfRounds: number) {\n        this.gameStatus = GameStatus.NEW;\n        this.roundStatus = RoundStatus.READY;\n        this.players = this.generatePlayers(numberOfPlayers);\n        this.totalRounds = numberOfRounds;\n        this.currentRound = 0;\n    }\n\n    private generatePlayers(numberOfPlayers: number): Player[]{\n        let generatedPlayers = [];\n        for (let i = 0; i < numberOfPlayers; i++){\n            generatedPlayers.push({\n                name: `Player ${i}`,\n                cards: [],\n                rank: 0,\n                score: 0\n            })\n        }\n\n        return generatedPlayers;\n    }\n\n    private getDealtCards(): Card[][]{\n        const dealtCards = Deck.dealCards(this.players.length, CARDS_PER_PLAYER)\n        if (!dealtCards){\n            throw new Error(\"Cards not available. Please reset the game.\");\n        }\n        return dealtCards;\n    }\n\n    private assignCardsToPlayers(cards: Card[][]): void{\n        cards.forEach((playerCards, index) => {\n            if (playerCards === undefined) return;\n\n            this.players[index].cards = playerCards;\n        });\n    }\n\n    private rankPlayer(player: Player): void{\n        if (isStraightFlush(player.cards)){\n            player.rank = PokerRanks.STRAIGHT_FLUSH;\n            return;\n        }\n        if (isFlush(player.cards)){\n            player.rank = PokerRanks.FLUSH;\n            return;\n        }\n        if (isStraight(player.cards)){\n            player.rank = PokerRanks.STRAIGHT;\n            return;\n        }\n        if (isPair(player.cards)){\n            player.rank = PokerRanks.PAIR;\n            return;\n        }\n        if (isHighCard(player.cards)){\n            player.rank = PokerRanks.HIGH_CARD;\n            return;\n        }\n    }\n\n    private findRoundWinner(): void{\n        this.players.sort((player1, player2) => {\n            return comparePlayerCards(player1, player2);\n        });\n\n        this.players.forEach((player, index) => {\n            // Simple math to compensate the inverted winner order\n            player.score += (this.players.length - index);\n        })\n    }\n\n    resetGame(): void{\n        this.gameStatus = GameStatus.NEW;\n        this.players = this.generatePlayers(this.players.length);\n        this.currentRound = 0;\n    }\n\n    getCurrentRound(): number{\n        return this.currentRound;\n    }\n\n    startNewRound(): void{\n        if (this.roundStatus === RoundStatus.STARTED){\n            throw new Error(\"Round already started. Please rank the hands before starting a new round.\");\n        } else {\n            this.roundStatus = RoundStatus.STARTED;\n        }\n\n        if (this.currentRound >= this.totalRounds){\n            this.gameStatus = GameStatus.FINISHED;\n        } else {\n            this.gameStatus = GameStatus.ONGOING;\n        }\n\n        if (this.gameStatus === GameStatus.FINISHED){\n            throw new Error (\"Game already finished. Please reset the game.\");\n        }\n\n        Deck.resetDeck();\n        Deck.shuffleDeck(SHUFFLE_TIMES);\n        this.assignCardsToPlayers(this.getDealtCards());\n\n        this.currentRound++;\n    }\n\n    rankHands(): void{\n        if (this.roundStatus === RoundStatus.RANKED){\n            throw new Error(\"Hand already ranked. Please start a new round before ranking again.\");\n        } else {\n            this.roundStatus = RoundStatus.RANKED;\n        }\n\n        this.players.forEach((player) => {\n            this.rankPlayer(player);\n        })\n        this.findRoundWinner();\n    }\n\n    findGameWinner(): Player{\n        if (this.gameStatus !== GameStatus.FINISHED){\n            throw new Error(\"Game not finished. Please finish all the rounds before ranking the final winner.\");\n        }\n        this.players.sort((player1, player2) => {\n            if (player1.score > player2.score){\n                return -1;\n            } else if (player1.score < player2.score){\n                return 1;\n            }\n            return 0;\n        });\n\n        return this.players[0];\n    }\n\n    getPlayers(): Player[]{\n        return this.players;\n    }\n\n    \n}\n\nexport default PokerGame;\n","import PokerGame from \"./PokerGame\";\nimport { Card, Player } from \"./interfaces\";\n\nlet pokerGame: PokerGame;\n\nfunction getCardsString(cards: Card[]){\n    const suits = {\n        \"1\": \"Diamonds\",\n        \"2\": \"Hearts\",\n        \"3\": \"Clubs\",\n        \"4\": \"Spades\"\n    } as any;\n\n    const values = {\n        \"1\": \"2\",\n        \"2\": \"3\",\n        \"3\": \"4\",\n        \"4\": \"5\",\n        \"5\": \"6\",\n        \"6\": \"7\",\n        \"7\": \"8\",\n        \"8\": \"9\",\n        \"9\": \"10\",\n        \"10\": \"Jack\",\n        \"11\": \"Queen\",\n        \"12\": \"King\",\n        \"13\": \"Ace\"\n    } as any;\n\n    const finalString = cards.map((card) => {\n        return `${values[card.value.toString()]} of ${suits[card.suit.toString()]}`;\n    }).join(\" | \");\n\n    return finalString;\n}\n\nfunction printOutput(){\n    const players = pokerGame.getPlayers();\n    const outputString = players.map((player) => {\n        return `${player.name}, Cards: (${getCardsString(player.cards)}), Rank: ${player.rank}, Score: ${player.score}`;\n    })\n\n    const outputElem = document.getElementById(\"output\") as HTMLElement;\n    outputElem.innerHTML = outputString.join(\"<br>\");\n\n    const currRound = pokerGame.getCurrentRound();\n    const roundLabelElem = document.getElementById(\"roundLabel\") as HTMLElement;\n\n    const roundElem = document.getElementById(\"roundsNumber\") as HTMLInputElement;\n    roundLabelElem.innerHTML = `(Round ${currRound.toString()} of ${roundElem.value})`;\n}\n\nfunction printOutputWinner(winner: Player){\n    const players = pokerGame.getPlayers();\n    const outputString = players.map((player) => {\n        if (winner.name === player.name){\n            return `<strong>${player.name}, Cards: (${getCardsString(player.cards)}), Rank: ${player.rank}, Score: ${player.score} (WINNER)</strong>`;\n        } else {\n            return `${player.name}, Cards: (${getCardsString(player.cards)}), Rank: ${player.rank}, Score: ${player.score}`;\n        }\n    })\n\n    const outputElem = document.getElementById(\"output\") as HTMLElement;\n    outputElem.innerHTML = outputString.join(\"<br>\");\n\n    const currRound = pokerGame.getCurrentRound();\n    const roundLabelElem = document.getElementById(\"roundLabel\") as HTMLElement;\n\n    const roundElem = document.getElementById(\"roundsNumber\") as HTMLInputElement;\n    roundLabelElem.innerHTML = `(Round ${currRound.toString()} of ${roundElem.value})`;\n}\n\nfunction startGame(){\n    const playerElem = document.getElementById(\"playerNumber\") as HTMLInputElement;\n    const roundElem = document.getElementById(\"roundsNumber\") as HTMLInputElement;\n\n    if (!playerElem || !roundElem){\n        alert(\"ERROR: Could not find Game Settings\");\n    } else {\n        pokerGame = new PokerGame(parseInt(playerElem.value), parseInt(roundElem.value));\n    }\n\n    printOutput();\n}\n\nfunction startRound(){\n    try {\n        pokerGame.startNewRound();\n        printOutput();    \n    } catch (error) {\n        alert(error);\n    }\n}\n\nfunction rankHands(){\n    try {\n        pokerGame.rankHands();\n        printOutput();\n    } catch (error) {\n        alert(error);\n    }\n}\n\nfunction findWinner(){\n    try {\n        const winner = pokerGame.findGameWinner();\n        printOutputWinner(winner);\n    } catch (error) {\n        alert(error);\n    }\n}\n\nfunction restartGame(){\n    try {\n        pokerGame.resetGame();\n        printOutput();    \n    } catch (error) {\n        alert(error);\n    }\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", function(event) { \n    const startBtnElem = document.getElementById(\"startGameBtn\") as HTMLElement;\n    startBtnElem.addEventListener(\"click\", startGame);\n\n    const startRoundBtnElem = document.getElementById(\"startRoundBtn\") as HTMLElement;\n    startRoundBtnElem.addEventListener(\"click\", startRound);\n\n    const rankHandsBtnElem = document.getElementById(\"rankHandsBtn\") as HTMLElement;\n    rankHandsBtnElem.addEventListener(\"click\", rankHands);\n\n    const findWinnerBtnElem = document.getElementById(\"findWinnerBtn\") as HTMLElement;\n    findWinnerBtnElem.addEventListener(\"click\", findWinner);\n\n    const restartBtnElem = document.getElementById(\"restartBtn\") as HTMLElement;\n    restartBtnElem.addEventListener(\"click\", restartGame);\n})"]}